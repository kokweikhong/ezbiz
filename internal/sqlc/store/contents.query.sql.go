// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: contents.query.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const createContent = `-- name: CreateContent :one
INSERT INTO contents (
    user_id,
    title,
    url
) VALUES ($1, $2, $3) RETURNING id
`

type CreateContentParams struct {
	UserID uuid.UUID `db:"user_id" json:"userId"`
	Title  string    `db:"title" json:"title"`
	Url    string    `db:"url" json:"url"`
}

func (q *Queries) CreateContent(ctx context.Context, arg *CreateContentParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createContent, arg.UserID, arg.Title, arg.Url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createImage = `-- name: CreateImage :one
INSERT INTO images (content_id, url) VALUES ($1, $2) RETURNING id
`

type CreateImageParams struct {
	ContentID uuid.UUID `db:"content_id" json:"contentId"`
	Url       string    `db:"url" json:"url"`
}

func (q *Queries) CreateImage(ctx context.Context, arg *CreateImageParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createImage, arg.ContentID, arg.Url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createSocial = `-- name: CreateSocial :one
INSERT INTO socials (
    content_id,
    phone_number,
    sms,
    email,
    whatsapp,
    facebook,
    instagram,
    messenger,
    website,
    location,
    google_maps,
    waze
    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) RETURNING id
`

type CreateSocialParams struct {
	ContentID   uuid.UUID `db:"content_id" json:"contentId"`
	PhoneNumber string    `db:"phone_number" json:"phoneNumber"`
	Sms         string    `db:"sms" json:"sms"`
	Email       string    `db:"email" json:"email"`
	Whatsapp    string    `db:"whatsapp" json:"whatsapp"`
	Facebook    string    `db:"facebook" json:"facebook"`
	Instagram   string    `db:"instagram" json:"instagram"`
	Messenger   string    `db:"messenger" json:"messenger"`
	Website     string    `db:"website" json:"website"`
	Location    string    `db:"location" json:"location"`
	GoogleMaps  string    `db:"google_maps" json:"googleMaps"`
	Waze        string    `db:"waze" json:"waze"`
}

func (q *Queries) CreateSocial(ctx context.Context, arg *CreateSocialParams) (int32, error) {
	row := q.db.QueryRow(ctx, createSocial,
		arg.ContentID,
		arg.PhoneNumber,
		arg.Sms,
		arg.Email,
		arg.Whatsapp,
		arg.Facebook,
		arg.Instagram,
		arg.Messenger,
		arg.Website,
		arg.Location,
		arg.GoogleMaps,
		arg.Waze,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteContent = `-- name: DeleteContent :exec
DELETE FROM contents WHERE id = $1
`

func (q *Queries) DeleteContent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteContent, id)
	return err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images WHERE content_id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, contentID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteImage, contentID)
	return err
}

const getContentByID = `-- name: GetContentByID :one
SELECT id, user_id, title, subtitle, url, color, about, favicon, background_image, profile_image, created_at, updated_at FROM contents WHERE id = $1
`

func (q *Queries) GetContentByID(ctx context.Context, id uuid.UUID) (*Content, error) {
	row := q.db.QueryRow(ctx, getContentByID, id)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Subtitle,
		&i.Url,
		&i.Color,
		&i.About,
		&i.Favicon,
		&i.BackgroundImage,
		&i.ProfileImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getContentByURL = `-- name: GetContentByURL :one
SELECT
  contents.id, contents.user_id, contents.title, contents.subtitle, contents.url, contents.color, contents.about, contents.favicon, contents.background_image, contents.profile_image, contents.created_at, contents.updated_at,
  socials.id, socials.content_id, socials.phone_number, socials.sms, socials.email, socials.whatsapp, socials.facebook, socials.instagram, socials.messenger, socials.website, socials.location, socials.google_maps, socials.waze,
  images.id, images.content_id, images.url
FROM contents
  LEFT JOIN socials ON contents.id = socials.content_id
  LEFT JOIN images ON contents.id = images.content_id
WHERE contents.url = $1
`

type GetContentByURLRow struct {
	Content Content `db:"content" json:"content"`
	Social  Social  `db:"social" json:"social"`
	Image   Image   `db:"image" json:"image"`
}

func (q *Queries) GetContentByURL(ctx context.Context, url string) (*GetContentByURLRow, error) {
	row := q.db.QueryRow(ctx, getContentByURL, url)
	var i GetContentByURLRow
	err := row.Scan(
		&i.Content.ID,
		&i.Content.UserID,
		&i.Content.Title,
		&i.Content.Subtitle,
		&i.Content.Url,
		&i.Content.Color,
		&i.Content.About,
		&i.Content.Favicon,
		&i.Content.BackgroundImage,
		&i.Content.ProfileImage,
		&i.Content.CreatedAt,
		&i.Content.UpdatedAt,
		&i.Social.ID,
		&i.Social.ContentID,
		&i.Social.PhoneNumber,
		&i.Social.Sms,
		&i.Social.Email,
		&i.Social.Whatsapp,
		&i.Social.Facebook,
		&i.Social.Instagram,
		&i.Social.Messenger,
		&i.Social.Website,
		&i.Social.Location,
		&i.Social.GoogleMaps,
		&i.Social.Waze,
		&i.Image.ID,
		&i.Image.ContentID,
		&i.Image.Url,
	)
	return &i, err
}

const getContents = `-- name: GetContents :many
SELECT id, user_id, title, subtitle, url, color, about, favicon, background_image, profile_image, created_at, updated_at FROM contents ORDER BY title ASC
`

func (q *Queries) GetContents(ctx context.Context) ([]*Content, error) {
	rows, err := q.db.Query(ctx, getContents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Content{}
	for rows.Next() {
		var i Content
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Subtitle,
			&i.Url,
			&i.Color,
			&i.About,
			&i.Favicon,
			&i.BackgroundImage,
			&i.ProfileImage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContent = `-- name: UpdateContent :exec
UPDATE contents SET 
  title = $2, 
  subtitle = $3, 
  url = $4, 
  color = $5,
  about = $6,
  favicon = $7,
  background_image = $8,
  profile_image = $9
WHERE id = $1
`

type UpdateContentParams struct {
	ID              uuid.UUID `db:"id" json:"id"`
	Title           string    `db:"title" json:"title"`
	Subtitle        string    `db:"subtitle" json:"subtitle"`
	Url             string    `db:"url" json:"url"`
	Color           string    `db:"color" json:"color"`
	About           string    `db:"about" json:"about"`
	Favicon         string    `db:"favicon" json:"favicon"`
	BackgroundImage string    `db:"background_image" json:"backgroundImage"`
	ProfileImage    string    `db:"profile_image" json:"profileImage"`
}

func (q *Queries) UpdateContent(ctx context.Context, arg *UpdateContentParams) error {
	_, err := q.db.Exec(ctx, updateContent,
		arg.ID,
		arg.Title,
		arg.Subtitle,
		arg.Url,
		arg.Color,
		arg.About,
		arg.Favicon,
		arg.BackgroundImage,
		arg.ProfileImage,
	)
	return err
}

const updateImage = `-- name: UpdateImage :exec
UPDATE images SET url = $2 WHERE content_id = $1
`

type UpdateImageParams struct {
	ContentID uuid.UUID `db:"content_id" json:"contentId"`
	Url       string    `db:"url" json:"url"`
}

func (q *Queries) UpdateImage(ctx context.Context, arg *UpdateImageParams) error {
	_, err := q.db.Exec(ctx, updateImage, arg.ContentID, arg.Url)
	return err
}

const updateSocial = `-- name: UpdateSocial :exec
UPDATE socials SET
  phone_number = $2,
  sms = $3,
  email = $4,
  whatsapp = $5,
  facebook = $6,
  instagram = $7,
  messenger = $8,
  website = $9,
  location = $10,
  google_maps = $11,
  waze = $12
WHERE content_id = $1
`

type UpdateSocialParams struct {
	ContentID   uuid.UUID `db:"content_id" json:"contentId"`
	PhoneNumber string    `db:"phone_number" json:"phoneNumber"`
	Sms         string    `db:"sms" json:"sms"`
	Email       string    `db:"email" json:"email"`
	Whatsapp    string    `db:"whatsapp" json:"whatsapp"`
	Facebook    string    `db:"facebook" json:"facebook"`
	Instagram   string    `db:"instagram" json:"instagram"`
	Messenger   string    `db:"messenger" json:"messenger"`
	Website     string    `db:"website" json:"website"`
	Location    string    `db:"location" json:"location"`
	GoogleMaps  string    `db:"google_maps" json:"googleMaps"`
	Waze        string    `db:"waze" json:"waze"`
}

func (q *Queries) UpdateSocial(ctx context.Context, arg *UpdateSocialParams) error {
	_, err := q.db.Exec(ctx, updateSocial,
		arg.ContentID,
		arg.PhoneNumber,
		arg.Sms,
		arg.Email,
		arg.Whatsapp,
		arg.Facebook,
		arg.Instagram,
		arg.Messenger,
		arg.Website,
		arg.Location,
		arg.GoogleMaps,
		arg.Waze,
	)
	return err
}
