// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package store

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Role string

const (
	RoleUser  Role = "user"
	RoleAdmin Role = "admin"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role `json:"role"`
	Valid bool `json:"valid"` // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type Content struct {
	ID              uuid.UUID        `db:"id" json:"id"`
	UserID          uuid.UUID        `db:"user_id" json:"userId"`
	Title           string           `db:"title" json:"title"`
	Subtitle        string           `db:"subtitle" json:"subtitle"`
	Url             string           `db:"url" json:"url"`
	Color           string           `db:"color" json:"color"`
	About           string           `db:"about" json:"about"`
	Favicon         string           `db:"favicon" json:"favicon"`
	BackgroundImage string           `db:"background_image" json:"backgroundImage"`
	ProfileImage    string           `db:"profile_image" json:"profileImage"`
	CreatedAt       pgtype.Timestamp `db:"created_at" json:"createdAt"`
	UpdatedAt       pgtype.Timestamp `db:"updated_at" json:"updatedAt"`
}

type Image struct {
	ID        uuid.UUID `db:"id" json:"id"`
	ContentID uuid.UUID `db:"content_id" json:"contentId"`
	Url       string    `db:"url" json:"url"`
}

type Social struct {
	ID          int32     `db:"id" json:"id"`
	ContentID   uuid.UUID `db:"content_id" json:"contentId"`
	PhoneNumber string    `db:"phone_number" json:"phoneNumber"`
	Sms         string    `db:"sms" json:"sms"`
	Email       string    `db:"email" json:"email"`
	Whatsapp    string    `db:"whatsapp" json:"whatsapp"`
	Facebook    string    `db:"facebook" json:"facebook"`
	Instagram   string    `db:"instagram" json:"instagram"`
	Messenger   string    `db:"messenger" json:"messenger"`
	Website     string    `db:"website" json:"website"`
	Location    string    `db:"location" json:"location"`
	GoogleMaps  string    `db:"google_maps" json:"googleMaps"`
	Waze        string    `db:"waze" json:"waze"`
}

type User struct {
	ID         uuid.UUID        `db:"id" json:"id"`
	Name       string           `db:"name" json:"name"`
	Email      string           `db:"email" json:"email"`
	Password   string           `db:"password" json:"password"`
	Role       Role             `db:"role" json:"role"`
	IsActive   bool             `db:"is_active" json:"isActive"`
	IsVerified bool             `db:"is_verified" json:"isVerified"`
	CreatedAt  pgtype.Timestamp `db:"created_at" json:"createdAt"`
	UpdatedAt  pgtype.Timestamp `db:"updated_at" json:"updatedAt"`
}
